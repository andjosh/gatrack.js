{"name":"Gatrack.js","tagline":"Easily track any user events with Google Analytics.","body":"# gatrack.js\r\n\r\n![gatrack.js](https://s3.amazonaws.com/bckmn/public/blog/gatrackjs.png)\r\n\r\n> Easily track user events with Google Analytics. Test UI/UX theories, compare client performance/speed, even track client-side errors. All user events are tied to all other session data in Google Analytics.\r\n\r\n## Is it any good?\r\n\r\nYou betcha. Check out the [provided index.html](https://github.com/jbckmn/gatrack.js/blob/master/index.html) demo for working examples.\r\n\r\n## Way-cool:\r\n\r\n- [Auto-track](#api-usage) events on elements with a class-based API\r\n- Explicit [action hook](#registering-custom-events), works with [any registerable browser event](https://developer.mozilla.org/en-US/docs/Web/Reference/Events) \r\n- Support for multiple versions of Google's analytics [tracking scripts](#things-youll-need) (_ga_ and *_gaq*)\r\n- Supports multiple loading multiple profiles at once\r\n- Track [client errors as separate events](#tracking-erros), attached to all prior & subsequent interaction data\r\n- All user events are tied to all other session data in Google Analytics\r\n- Weighs under 3kb (_even smaller if you're smart enough to gzip_)\r\n- Provides tracking support for [common events](#api-usage)\r\n  - Scrolling\r\n  - Touches\r\n  - Links\r\n  - Clicks\r\n  - Hovering\r\n  - Errors\r\n\r\n## Things you'll need\r\n\r\n- A Google Analytics profile\r\n- A version of the [Google Analytics](http://www.google.com/analytics/) tracking script released within the last couple years, installed in your page source\r\n\r\n## API usage\r\n\r\nThe API, on load, detects and tracks events for touch, hover, scroll, click, link and load. To specify category or the action being taken (both optional), simply add data-attributes of `gatrack-category` and/or `gatrack-action` and/or `gatrack-label` and/or `gatrack-value`.\r\n\r\n#### Click events\r\n\r\nFor an element on which you wish to track click events, add a class of `ga-click-trackable`.\r\n\r\n#### Link visits\r\n\r\nFor links (internal or outbound) for which you want to track user interaction, add a class of `ga-link-trackable`.\r\n\r\n#### Hover events\r\n\r\nFor an element on which you wish to track hover events, add a class of `ga-hover-trackable`.\r\n\r\n#### Load events\r\n\r\nFor an element on which you wish to track load events, add a class of `ga-load-trackable`.\r\n\r\n#### Touch events\r\n\r\nFor an element on which you wish to track touch events, add a class of `ga-touch-trackable`.\r\n\r\n#### Scroll events\r\n\r\nFor an element on which you wish to track scroll events, add a class of `ga-scroll-trackable`. You need to specfiy the position at which to trigger the event (either percentage amount or pixel distance, '30%' or '300px', by setting `data-gatrack-scroll-point`). For this type of event, you can also specify scrolling direction ('x' or 'y', by setting `data-gatrack-scroll-direction`) to track , which defaults to 'y', or vertical.\r\n\r\n## Registering custom events\r\n\r\n*__gatrack.action__(element, category, action [, label, value, callback(result)])*\r\n\r\n*__gatrack.link__(element [, category, action, label, value])*\r\n\r\n*__gatrack.click__(element [, category, action, label, value])*\r\n\r\n*__gatrack.load__(element [, category, action, label, value])*\r\n\r\n*__gatrack.touch__(element [, category, action, label, value])*\r\n\r\n*__gatrack.hover__(element [, category, action, label, value])*\r\n\r\n*__gatrack.scrollAt__(element, scrollPoint [, scrollDirection, category, action, label, value])*\r\n\r\nGoogle Analytics events accept four parameters:\r\n- __category:__ _string_\r\n- __action:__ _string_\r\n- __label:__ _string_\r\n- __value:__ _integer_\r\n\r\nIn general, the event hooks look for things like an element `id` or `title` attribute to assign to the _action_ parameter when one is not specified either explicitly or in the data-attribute of the element.\r\n\r\nIn the case of the __link__ event, it looks for the `href` value in absence of an explicity declaration or data-attribute, and the __scrollAt__ event looks for the page title content.\r\n\r\n*__gatrack.init__()* is available and can be used to initialize the event listeners on specified elements whenever you like.\r\n\r\nThe __action__ hook, when given an optional callback function, returns a 'success' string on success and a traditional error object otherwise.\r\n\r\nYou can [read more specifics](https://developers.google.com/analytics/devguides/collection/analyticsjs/events) about [the event object in Google Analytics](https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide).\r\n\r\n## Tracking Errors\r\n\r\nYou can also track errors on your page through gatrack. All you'll need to do is override the native `onerror` function with one for gatrack. \r\n\r\nTo start recording errors, you simply need to place the following snippet in a `script` tag so that it will be the first code executed on your page, preferrably in the `head` of your document.\r\n\r\n```javascript\r\n// One-liner, minified (use this one!)\r\n(function(g,a,t,r,a,c,k){g[r]=g[r]||{};g[r][a]=t.getTime();g[r][c]=[];g[c]=function(m,u,l,c,e){this.gatrack.onerror.push([m,u,l,c,e])}})(window,document,(new Date()),'gatrack','timer','onerror');\r\n```\r\n```javascript\r\n// Expanded, so you can see\r\n(function(g,a,t,r,a,c,k){\r\n  g[r] = g[r] || {};\r\n  g[r][a] = t.getTime();\r\n  g[r][c] = [];\r\n  g[c] = function( m, u, l, c, e ) {\r\n    this.gatrack.onerror.push([m, u, l, c, e]);\r\n  };\r\n})(window,document,(new Date()),'gatrack','timer','onerror');\r\n```\r\n\r\nThis snippet will allow you to record errors that are raised even before any other JavaScript code is executed. The gatrack library records errors in the following format:\r\n- __category__: 'Recorded Error'\r\n- __label__: The error's message string\r\n- __action__: 'Error line:column(url)'\r\n- __value__: Time of occurence after HTML load (in seconds, rounded to nearest hundreth)\r\n","google":"UA-37125372-11","note":"Don't delete this file! It's used internally to help with page regeneration."}